//
//  MessagesViewController.swift
//  Bantr MessagesExtension
//
//  Created by Andrew Mangan on 2/5/23.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    let buttonStackView = UIStackView()
    let askButton = UIButton()
    let otherButton1 = UIButton()
    let otherButton2 = UIButton()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
    }

    func setupUI() {
        // Create button stack view
        buttonStackView.axis = .horizontal
        buttonStackView.distribution = .equalSpacing
        buttonStackView.spacing = 20
        view.addSubview(buttonStackView)
        
        // Set up button stack view constraints
        buttonStackView.translatesAutoresizingMaskIntoConstraints = false
        buttonStackView.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true
        buttonStackView.centerYAnchor.constraint(equalTo: view.centerYAnchor).isActive = true
        
        // Create and add ask button to stack view
        askButton.setTitle("Ask Davinci", for: .normal)
        askButton.titleLabel?.font = UIFont.systemFont(ofSize: 24, weight: .regular)
        askButton.setTitleColor(.black, for: .normal)
        askButton.backgroundColor = UIColor(red: 0.9, green: 0.9, blue: 0.9, alpha: 1)
        askButton.layer.cornerRadius = 10
        askButton.addTarget(self, action: #selector(displayInputView), for: .touchUpInside)
        buttonStackView.addArrangedSubview(askButton)
        
        // Create and add other buttons to stack view
        otherButton1.setTitle("Button 1", for: .normal)
        otherButton1.titleLabel?.font = UIFont.systemFont(ofSize: 20, weight: .regular)
        otherButton1.setTitleColor(.black, for: .normal)
        otherButton1.backgroundColor = UIColor(red: 0.9, green: 0.9, blue: 0.9, alpha: 1)
        otherButton1.layer.cornerRadius = 10
        buttonStackView.addArrangedSubview(otherButton1)
        
        otherButton2.setTitle("Button 2", for: .normal)
        otherButton2.titleLabel?.font = UIFont.systemFont(ofSize: 20, weight: .regular)
        otherButton2.setTitleColor(.black, for: .normal)
        otherButton2.backgroundColor = UIColor(red: 0.9, green: 0.9, blue: 0.9, alpha: 1)
        otherButton2.layer.cornerRadius = 10
        buttonStackView.addArrangedSubview(otherButton2)
    }
    
    @objc func displayInputView() {
        askButton.isHidden = true
        otherButton1.isHidden = true
        otherButton2.isHidden = true
    }

    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dismisses the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}
